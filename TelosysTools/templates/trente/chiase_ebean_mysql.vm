package ${target.javaPackageFromFolder($SRC)};
#set($createDateAtt = $entity.getAttributeByColumnName("create_date"))
#set($isTrue = $entity.attributes.remove($createDateAtt))
#set($createUserAtt = $entity.getAttributeByColumnName("create_user"))
#set($isTrue = $entity.attributes.remove($createUserAtt))
#set($updateDateAtt = $entity.getAttributeByColumnName("update_date"))
#set($isTrue = $entity.attributes.remove($updateDateAtt))
#set($updateUserAtt = $entity.getAttributeByColumnName("update_user"))
#set($isTrue = $entity.attributes.remove($updateUserAtt))
#set($deleteFlagAtt = $entity.getAttributeByColumnName("delete_flag"))
#set($isTrue = $entity.attributes.remove($deleteFlagAtt))
#set($dataFields = $entity.getAttributesByCriteria($const.NOT_KEY, $const.NOT_IN_SELECTED_LINKS))
#set($allMappedFields = $fn.concatLists($entity.keyAttributes, $dataFields))

import models.entity.DatabaseCommonModel;
#foreach($import in $java.imports($entity))
import $import;
#end
#foreach($link in $entity.selectedLinks)
#if($link.isCardinalityOneToMany())
import java.util.ArrayList;
#break;
#end
#end

#foreach($import in $jpa.imports($entity))
import $import;
#end

@Entity
public class ${entity.name} extends DatabaseCommonModel{

    private static final long serialVersionUID = 1L;

#foreach($field in $entity.keyAttributes)
    #set ($propertyName = "${field.databaseName}_property")
	public static final String $propertyName.toUpperCase() = "$field.formattedName(1)";

#end
#foreach($field in $dataFields)
	#set ($propertyName = "${field.databaseName}_property")
    public static final String $propertyName.toUpperCase() = "$field.formattedName(1)";

#end
#foreach($link in $entity.selectedLinks)
	#set ($propertyName = "${link.fieldName}_property")
    public static final String $propertyName.toUpperCase() = "$link.fieldName";

#end
    //----------------------------------------------------------------------
    // ENTITY PRIMARY KEY (BASED ON A SINGLE FIELD)
    //----------------------------------------------------------------------
#foreach($field in $entity.keyAttributes)
	@Id
    private $field.formattedType(10) $field.formattedName(12) #if($field.hasInitialValue())= ${field.initialValue} #end;

#end
    //----------------------------------------------------------------------
    // ENTITY DATA FIELDS 
    //----------------------------------------------------------------------    
#foreach($field in $dataFields)
    private $field.formattedType(10) $field.formattedName(12) #if($field.hasInitialValue())= ${field.initialValue} #end;

#end

    //----------------------------------------------------------------------
    // ENTITY LINKS (RELATIONSHIP)
    //----------------------------------------------------------------------
#foreach($link in $entity.selectedLinks)
$jpa.linkAnnotations(4, $link, $allMappedFields)
#if($link.isCardinalityOneToMany())
	private ${link.formattedFieldType(0)} $link.formattedFieldName(12) = new ArrayList<$link.targetEntity>();
	
#else
	private ${link.formattedFieldType(0)} $link.formattedFieldName(12);

#end
#end
    //----------------------------------------------------------------------
    // CONSTRUCTOR(S)
    //----------------------------------------------------------------------
    public ${entity.name}(){
		super();
    }
    
#foreach($field in $entity.keyAttributes)
#if ($field.setter)    public void ${field.setter}($field.type $field.name){
        this.$field.name = $field.name ;
    }

#end
#if ($field.getter)    public $field.type ${field.getter}(){
        return this.$field.name;
    }

#end
#end
    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR FIELDS
    //----------------------------------------------------------------------
#foreach($field in $dataFields)
#if ($field.setter)    public void ${field.setter}($field.type $field.name){
        this.$field.name = $field.name;
    }

#end
#if ($field.getter)    public $field.type ${field.getter}(){
        return this.$field.name;
    }

#end
#end  
    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR LINKS
    //----------------------------------------------------------------------
#foreach($link in $entity.selectedLinks)
#if ($link.setter)    public void ${link.setter}(${link.formattedFieldType(0)} ${link.formattedFieldName(0)}){
        this.${link.formattedFieldName(0)} = ${link.formattedFieldName(0)};
    }

#end
#if ($link.getter)    public ${link.formattedFieldType(0)} ${link.getter}(){
        return this.${link.formattedFieldName(0)};
    }

#end
#end
}